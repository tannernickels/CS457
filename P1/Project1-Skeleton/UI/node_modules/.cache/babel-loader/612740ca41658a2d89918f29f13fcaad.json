{"ast":null,"code":"import _regeneratorRuntime from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Button, ButtonGroup, InputGroupAddon, InputGroup, Input, TabContent, TabPane, Nav, NavItem, NavLink, Card, CardTitle, CardText, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Row, Col, Table } from 'reactstrap';\nimport classnames from 'classnames';\nimport Messages from \"./Messages\"; //const MTable = require('./HashTable.js');\n\nimport MessageTable from './HashTable';\n\nfunction randomName() {\n  var adjectives = [\"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\", \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\", \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\", \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\", \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\", \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\", \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\", \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\", \"ancient\", \"purple\", \"lively\", \"nameless\"];\n  var nouns = [\"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\", \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\", \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\", \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\", \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\", \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\", \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\", \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\", \"smoke\", \"star\"];\n  var adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  var noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.callBackendAPI =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:57000/express_backend', {\n                method: \"POST\",\n                // *GET, POST, PUT, DELETE, etc.\n                mode: \"cors\",\n                // no-cors, cors, *same-origin\n                headers: {\n                  \"Content-Type\": \"text/plain\"\n                },\n                body: document.location.host // body data type must match \"Content-Type\" header\n\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.getMail =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var body_data, response, res, m, message, id, msg, table, messages, tabList;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              body_data = {\n                id: _this.state.client_id\n              };\n              _context2.next = 3;\n              return fetch('http://localhost:57000/mail', {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: {\n                  \"Content-Type\": \"text/plain\"\n                },\n                body: _this.state.client_id\n              });\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.json();\n\n            case 6:\n              res = _context2.sent;\n              alert(JSON.stringify(res));\n\n              if (res.messages != \"null\") {\n                //parse out id and msg... <id> msg\n                for (; m < res.messages.split('~').length; m++) {\n                  message = res.messages.split('~')[m];\n                  id = message.substring(message.indexOf(\"<\") + 1);\n                  id = id.substring(0, id.indexOf(\">\"));\n                  msg = message.substring(message.indexOf(\">\") + 1);\n                  table = _this.state.messagesTable;\n                  messages = table.get(id);\n\n                  if (messages == null) {\n                    // received message from a new channel or user.. create tab and add data to the respective messages array\n                    messages = [];\n                    messages.push({\n                      text: msg,\n                      member: id\n                    });\n                    table.insert(id, messages);\n\n                    _this.setState({\n                      messagesTable: table\n                    });\n\n                    tabList = _this.state.tabsList;\n                    tabList.push(id);\n\n                    _this.setState({\n                      tabsList: tabList\n                    });\n                  } else {\n                    messages.push({\n                      text: msg,\n                      member: id\n                    });\n                    table.insert(id, messages);\n\n                    _this.setState({\n                      messagesTable: table\n                    });\n                  }\n\n                  _this.setState({\n                    activeTable: id\n                  });\n                }\n                /*var id = res.messages.substring(res.messages.indexOf(\"<\") + 1);\n                var id = id.substring(0, id.indexOf(\">\"));\n                var msg = res.messages.substring(res.messages.indexOf(\">\") + 1);\n                \n                var table = this.state.messagesTable;\n                var messages = table.get(id);\n                if(messages == null){ // received message from a new channel or user.. create tab and add data to the respective messages array\n                  messages = [];\n                  for(var i=0; i < msg.split('~').length; i++){\n                    if(i != 0){\n                      var id = msg.split('~')[i].substring(msg.split('~')[i].indexOf(\"<\") + 1);\n                      var id = id.substring(0, id.indexOf(\">\"));\n                      var msg = res.messages.substring(res.messages.indexOf(\">\") + 1);\n                    }else{\n                      messages.push({\n                        text: msg.split('~')[i],\n                        member: this.state.server\n                      });\n                    }\n                  }\n                  table.insert(id, messages);\n                  this.setState({messagesTable: table});\n                  var tabList = this.state.tabsList;\n                  tabList.push(id);\n                  this.setState({tabsList: tabList});\n                }\n                else{\n                  for(var i=0; i < msg.split('~').length; i++){ \n                    messages.push({\n                      text: msg.split('~')[i],\n                      member: this.state.server\n                    });\n                  }\n                  table.insert(id, messages);\n                  this.setState({messagesTable: table});\n                }*/\n                //this.setState({activeTable: id});\n\n              }\n\n              setTimeout(_this.getMail, 5000);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.state = {\n      activeTable: 'server',\n      client_id: '',\n      data: null,\n      tabs: {\n        'tab-1': '1'\n      },\n      tabsList: ['server'],\n      activeTab: '-1',\n      messagesTable: new MessageTable(10),\n      messages: [],\n      user: {\n        id: 'user',\n        username: randomName(),\n        color: randomColor()\n      },\n      server: {\n        id: 'server',\n        username: 'server',\n        color: randomColor()\n      }\n    };\n    _this.sendMessage = _this.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getMail = _this.getMail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderTabs = _this.renderTabs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearMessages = _this.clearMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var table = this.state.messagesTable;\n      table.insert('server', []);\n      this.setState({\n        messagesTable: table\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        client_id: document.location.host\n      }); // Call our fetch function below once the component mounts\n\n      this.callBackendAPI().then(function (res) {\n        return _this2.setState({\n          data: res.express\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      }); // initiate continuous calls to clients mail box\n\n      this.getMail();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(tab) {\n      if (this.state.activeTab !== tab) {\n        this.setState({\n          activeTab: tab,\n          activeTable: tab\n        });\n      }\n    }\n  }, {\n    key: \"clearMessages\",\n    value: function clearMessages() {\n      //this.setState({messages: []});\n      var table = this.state.messagesTable;\n      table.insert(this.state.activeTable, []);\n      this.setState({\n        messagesTable: table\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var table, messages, body_data, response, res, message_list, i, updateTable;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                table = this.state.messagesTable;\n                messages = table.get(this.state.activeTable);\n                messages.push({\n                  text: document.getElementById('msg-input').value,\n                  member: this.state.user\n                });\n                table.insert(this.state.activeTable, messages);\n                this.setState({\n                  messagesTable: table\n                });\n                console.log(this.state.client_id);\n                body_data = {\n                  id: this.state.client_id\n                };\n                _context3.next = 9;\n                return fetch('http://localhost:57000/message', {\n                  method: \"POST\",\n                  // *GET, POST, PUT, DELETE, etc.\n                  mode: \"cors\",\n                  // no-cors, cors, *same-origin\n                  headers: {\n                    \"Content-Type\": \"text/plain\" // \"Content-Type\": \"application/x-www-form-urlencoded\",\n\n                  },\n                  body: this.state.client_id + '~' + document.getElementById('msg-input').value // body data type must match \"Content-Type\" header\n\n                });\n\n              case 9:\n                response = _context3.sent;\n                _context3.next = 12;\n                return response.json();\n\n              case 12:\n                res = _context3.sent;\n\n                //alert(await res.express);\n                if (res.express != \"null\") {\n                  table = this.state.messagesTable;\n                  message_list = table.get(this.state.activeTable);\n\n                  for (i = 0; i < res.express.split('~').length; i++) {\n                    message_list.push({\n                      text: res.express.split('~')[i],\n                      member: this.state.server\n                    });\n                  } //this.setState({messages: message_list});\n\n\n                  updateTable = this.state.messagesTable;\n                  updateTable.insert(this.state.activeTable, message_list);\n                  this.setState({\n                    messagesTable: updateTable\n                  });\n                }\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function sendMessage() {\n        return _sendMessage.apply(this, arguments);\n      };\n    }() // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n  }, {\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var _this3 = this;\n\n      var tabs = this.state.tabsList.map(function (item) {\n        return React.createElement(NavItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          className: classnames({\n            active: _this3.state.activeTab === item\n          }),\n          onClick: function onClick() {\n            _this3.toggle(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, item));\n      });\n      return React.createElement(Nav, {\n        tabs: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, tabs);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"chat-ui\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"IRC Chat App\"), this.renderTabs()), React.createElement(\"div\", {\n        className: \"chat-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Messages, {\n        messages: this.state.messagesTable.get(this.state.activeTable),\n        currentMember: this.state.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"chat-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this4.sendMessage();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Send\")), React.createElement(Input, {\n        id: \"msg-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this4.clearMessages();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Clear Chat\")))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/App.js"],"names":["React","Component","Button","ButtonGroup","InputGroupAddon","InputGroup","Input","TabContent","TabPane","Nav","NavItem","NavLink","Card","CardTitle","CardText","ButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","Row","Col","Table","classnames","Messages","MessageTable","randomName","adjectives","nouns","adjective","Math","floor","random","length","noun","randomColor","toString","App","props","callBackendAPI","fetch","method","mode","headers","body","document","location","host","response","json","status","Error","message","getMail","body_data","id","state","client_id","res","alert","JSON","stringify","messages","m","split","substring","indexOf","msg","table","messagesTable","get","push","text","member","insert","setState","tabList","tabsList","activeTable","setTimeout","data","tabs","activeTab","user","username","color","server","sendMessage","bind","toggle","renderTabs","clearMessages","then","express","catch","err","console","log","tab","getElementById","value","message_list","i","updateTable","map","item","active"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {  Button, ButtonGroup, InputGroupAddon, InputGroup, Input, \n          TabContent, TabPane, Nav, NavItem, NavLink, Card, CardTitle, CardText,\n          ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem , Row, Col, Table } from 'reactstrap';\nimport classnames from 'classnames';\nimport Messages from \"./Messages\";\n//const MTable = require('./HashTable.js');\nimport MessageTable from './HashTable';\n\n\nfunction randomName() {\n  const adjectives = [\"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\", \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\", \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\", \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\", \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\", \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\", \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\", \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\", \"ancient\", \"purple\", \"lively\", \"nameless\"];\n  const nouns = [\"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\", \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\", \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\", \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\", \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\", \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\", \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\", \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\", \"smoke\", \"star\"];\n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      activeTable: 'server',\n      client_id: '',\n      data: null,\n      tabs: {'tab-1': '1'},\n      tabsList: ['server'],\n      activeTab: '-1',\n      messagesTable: new MessageTable(10),\n      messages: [],\n      user: {\n        id: 'user',\n        username: randomName(),\n        color: randomColor()\n      },\n      server: {\n        id: 'server',\n        username: 'server',\n        color: randomColor()\n      }\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.getMail = this.getMail.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.renderTabs = this.renderTabs.bind(this);\n    this.clearMessages = this.clearMessages.bind(this);\n  }\n  componentWillMount(){\n    var table = this.state.messagesTable;\n    table.insert('server', []);\n    this.setState({messagesTable: table});\n  }\n  componentDidMount() {\n    this.setState({client_id: document.location.host});\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n    // initiate continuous calls to clients mail box\n    this.getMail();\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab,\n        activeTable: tab\n      });\n    }\n  }\n\n  clearMessages(){\n    //this.setState({messages: []});\n    var table = this.state.messagesTable;\n    table.insert(this.state.activeTable, []);\n    this.setState({messagesTable: table});\n  }\n\n\n  async sendMessage(){\n    var table = this.state.messagesTable;\n    var messages = table.get(this.state.activeTable);\n\n    messages.push({\n      text: document.getElementById('msg-input').value,\n      member: this.state.user\n    });\n    table.insert(this.state.activeTable, messages);\n    this.setState({messagesTable: table});\n\n    console.log(this.state.client_id);\n    const body_data = {id: this.state.client_id}\n    const response = await fetch('http://localhost:57000/message', {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: this.state.client_id + '~' + document.getElementById('msg-input').value // body data type must match \"Content-Type\" header\n    });\n    const res = await response.json();\n    //alert(await res.express);\n    if(res.express != \"null\"){\n      var table = this.state.messagesTable;\n      var message_list = table.get(this.state.activeTable);\n      \n        for(var i=0; i < res.express.split('~').length; i++){ \n          message_list.push({\n            text: res.express.split('~')[i],\n            member: this.state.server\n          });\n          \n        }\n        //this.setState({messages: message_list});\n        var updateTable = this.state.messagesTable;\n        updateTable.insert(this.state.activeTable, message_list);\n      \n        this.setState({messagesTable: updateTable})\n        \n      }\n    }\n  \n\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('http://localhost:57000/express_backend', {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n        },\n        body: document.location.host, // body data type must match \"Content-Type\" header\n    });\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  getMail = async() => {\n    const body_data = {id: this.state.client_id}\n    const response = await fetch('http://localhost:57000/mail', {\n        method: \"POST\",\n        mode: \"cors\", \n        headers: {\"Content-Type\": \"text/plain\"},\n        body: this.state.client_id\n    });\n    const res = await response.json();\n    alert(JSON.stringify(res));\n    if(res.messages != \"null\"){\n      //parse out id and msg... <id> msg\n      for(var m; m < res.messages.split('~').length; m++){\n        var message = res.messages.split('~')[m];\n        var id = message.substring(message.indexOf(\"<\") + 1);\n        id = id.substring(0, id.indexOf(\">\"));\n        var msg = message.substring(message.indexOf(\">\") + 1);\n\n        var table = this.state.messagesTable;\n        var messages = table.get(id);\n        if(messages == null){ // received message from a new channel or user.. create tab and add data to the respective messages array\n          messages = [];\n          \n          messages.push({\n                text: msg,\n                member: id\n          });\n        \n          table.insert(id, messages);\n          this.setState({messagesTable: table});\n          var tabList = this.state.tabsList;\n          tabList.push(id);\n          this.setState({tabsList: tabList});\n        }\n        else{\n          \n          messages.push({\n              text: msg,\n              member: id\n          });\n          \n          table.insert(id, messages);\n          this.setState({messagesTable: table});\n        }\n        this.setState({activeTable: id});\n      }\n      /*var id = res.messages.substring(res.messages.indexOf(\"<\") + 1);\n      var id = id.substring(0, id.indexOf(\">\"));\n      var msg = res.messages.substring(res.messages.indexOf(\">\") + 1);\n      \n      var table = this.state.messagesTable;\n      var messages = table.get(id);\n      if(messages == null){ // received message from a new channel or user.. create tab and add data to the respective messages array\n        messages = [];\n        for(var i=0; i < msg.split('~').length; i++){\n          if(i != 0){\n            var id = msg.split('~')[i].substring(msg.split('~')[i].indexOf(\"<\") + 1);\n            var id = id.substring(0, id.indexOf(\">\"));\n            var msg = res.messages.substring(res.messages.indexOf(\">\") + 1);\n          }else{\n            messages.push({\n              text: msg.split('~')[i],\n              member: this.state.server\n            });\n          }\n        }\n        table.insert(id, messages);\n        this.setState({messagesTable: table});\n        var tabList = this.state.tabsList;\n        tabList.push(id);\n        this.setState({tabsList: tabList});\n      }\n      else{\n        for(var i=0; i < msg.split('~').length; i++){ \n          messages.push({\n            text: msg.split('~')[i],\n            member: this.state.server\n          });\n        }\n        table.insert(id, messages);\n        this.setState({messagesTable: table});\n      }*/\n      //this.setState({activeTable: id});\n    }\n    \n    setTimeout(this.getMail, 5000)\n  }\n  \n  renderTabs(){\n    const tabs = this.state.tabsList.map(item => <NavItem><NavLink className={classnames({ active: this.state.activeTab === item })}\n    onClick={() => { this.toggle(item); }}>{item}</NavLink></NavItem> );\n    return (\n      <Nav tabs>\n       {tabs}\n      </Nav>\n    );\n                    \n  }\n  \n  render() {\n    return (\n      \n      <div className=\"App\">\n        \n        <section className=\"chat-ui\">\n          <div className=\"chat-header\">\n          <h1>IRC Chat App</h1>\n          {this.renderTabs()}\n          </div>\n          <div className=\"chat-messages\">\n            <Messages messages={this.state.messagesTable.get(this.state.activeTable)} currentMember={this.state.user}/>\n          </div>\n          \n        </section>\n        <div className=\"chat-input\">\n            <InputGroup>\n              <InputGroupAddon addonType=\"prepend\">\n                <Button type=\"submit\" color=\"primary\" onClick={() => this.sendMessage()} >Send</Button>\n              </InputGroupAddon>\n              <Input id=\"msg-input\"/>\n              <InputGroupAddon addonType=\"prepend\">\n                <Button color=\"primary\" onClick={() => this.clearMessages()} >Clear Chat</Button>\n              </InputGroupAddon>\n            </InputGroup>\n        </div>\n        \n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}