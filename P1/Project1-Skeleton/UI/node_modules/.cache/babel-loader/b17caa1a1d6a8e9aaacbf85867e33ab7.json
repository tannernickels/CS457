{"ast":null,"code":"import _classCallCheck from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/s/bach/k/under/dcdennis/CS457-UI/ui/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n/*\nIn the node.js intro tutorial (http://nodejs.org/), they show a basic tcp \nserver, but for some reason omit a client connecting to it.  I added an \nexample at the bottom.\nSave the following server in example.js:\n*/\n\nvar net = require('net');\n\nvar server = net.createServer(function (socket) {\n  socket.write('Echo server\\r\\n');\n  socket.pipe(socket);\n});\nserver.listen(1337, '127.0.0.1');\n/*\nAnd connect with a tcp client from the command line using netcat, the *nix \nutility for reading and writing across tcp/udp network connections.  I've only \nused it for debugging myself.\n$ netcat 127.0.0.1 1337\nYou should see:\n> Echo server\n*/\n\n/* Or use this example tcp client written in node.js.  (Originated with \nexample code from \nhttp://www.hacksparrow.com/tcp-socket-programming-in-node-js.html.) */\n\nvar net = require('net');\n\nvar client = new net.Socket();\nclient.connect(1337, '127.0.0.1', function () {\n  console.log('Connected');\n  client.write('Hello, server! Love, Client.');\n});\nclient.on('data', function (data) {\n  console.log('Received: ' + data);\n  client.destroy(); // kill client after server's response\n});\nclient.on('close', function () {\n  console.log('Connection closed');\n});\n\nfunction startServerConnectoin() {\n  var socket = new WebSocket('ws://127.0.0.1:2000');\n\n  socket.onopen = function (event) {\n    // Send an initial message\n    socket.send('I am the client and I\\'m listening!'); // Listen for messages\n\n    socket.onmessage = function (event) {\n      console.log('Client received a message', event);\n    }; // Listen for socket closes\n\n\n    socket.onclose = function (event) {\n      console.log('Client notified socket has closed', event);\n    }; // To close the socket....\n    //socket.close()\n\n  };\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      startServerConnectoin();\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Edit \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Learn React\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/s/bach/k/under/dcdennis/CS457-UI/ui/src/App.js"],"names":["React","Component","net","require","server","createServer","socket","write","pipe","listen","client","Socket","connect","console","log","on","data","destroy","startServerConnectoin","WebSocket","onopen","event","send","onmessage","onclose","App","logo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AAGA;;;;;;;AAOA,IAAIC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIC,MAAM,GAAGF,GAAG,CAACG,YAAJ,CAAiB,UAASC,MAAT,EAAiB;AAC9CA,EAAAA,MAAM,CAACC,KAAP,CAAa,iBAAb;AACAD,EAAAA,MAAM,CAACE,IAAP,CAAYF,MAAZ;AACA,CAHY,CAAb;AAKAF,MAAM,CAACK,MAAP,CAAc,IAAd,EAAoB,WAApB;AAEA;;;;;;;;;AASA;;;;AAIA,IAAIP,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIO,MAAM,GAAG,IAAIR,GAAG,CAACS,MAAR,EAAb;AACAD,MAAM,CAACE,OAAP,CAAe,IAAf,EAAqB,WAArB,EAAkC,YAAW;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAJ,EAAAA,MAAM,CAACH,KAAP,CAAa,8BAAb;AACA,CAHD;AAKAG,MAAM,CAACK,EAAP,CAAU,MAAV,EAAkB,UAASC,IAAT,EAAe;AAChCH,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAeE,IAA3B;AACAN,EAAAA,MAAM,CAACO,OAAP,GAFgC,CAEd;AAClB,CAHD;AAKAP,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC7BF,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,CAFD;;AAIA,SAASI,qBAAT,GAAiC;AAC/B,MAAIZ,MAAM,GAAG,IAAIa,SAAJ,CAAc,qBAAd,CAAb;;AACAb,EAAAA,MAAM,CAACc,MAAP,GAAgB,UAASC,KAAT,EAAgB;AAE9B;AACAf,IAAAA,MAAM,CAACgB,IAAP,CAAY,qCAAZ,EAH8B,CAK9B;;AACAhB,IAAAA,MAAM,CAACiB,SAAP,GAAmB,UAASF,KAAT,EAAgB;AACjCR,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCO,KAAxC;AACD,KAFD,CAN8B,CAU9B;;;AACAf,IAAAA,MAAM,CAACkB,OAAP,GAAiB,UAASH,KAAT,EAAgB;AAC/BR,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAgDO,KAAhD;AACD,KAFD,CAX8B,CAe9B;AACA;;AAED,GAlBD;AAmBD;;IAGKI,G;;;;;;;;;;;;;6BACK;AACPP,MAAAA,qBAAqB;AACrB,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEQ,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADP,yBAFF,EAKE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,IAAI,EAAC,qBAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALF,CADF,CADF;AAkBD;;;;EArBezB,S;;AAwBlB,eAAewB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n/*\nIn the node.js intro tutorial (http://nodejs.org/), they show a basic tcp \nserver, but for some reason omit a client connecting to it.  I added an \nexample at the bottom.\nSave the following server in example.js:\n*/\n\nvar net = require('net');\n\nvar server = net.createServer(function(socket) {\n\tsocket.write('Echo server\\r\\n');\n\tsocket.pipe(socket);\n});\n\nserver.listen(1337, '127.0.0.1');\n\n/*\nAnd connect with a tcp client from the command line using netcat, the *nix \nutility for reading and writing across tcp/udp network connections.  I've only \nused it for debugging myself.\n$ netcat 127.0.0.1 1337\nYou should see:\n> Echo server\n*/\n\n/* Or use this example tcp client written in node.js.  (Originated with \nexample code from \nhttp://www.hacksparrow.com/tcp-socket-programming-in-node-js.html.) */\n\nvar net = require('net');\n\nvar client = new net.Socket();\nclient.connect(1337, '127.0.0.1', function() {\n\tconsole.log('Connected');\n\tclient.write('Hello, server! Love, Client.');\n});\n\nclient.on('data', function(data) {\n\tconsole.log('Received: ' + data);\n\tclient.destroy(); // kill client after server's response\n});\n\nclient.on('close', function() {\n\tconsole.log('Connection closed');\n});\n\nfunction startServerConnectoin() {\n  var socket = new WebSocket('ws://127.0.0.1:2000');\n  socket.onopen = function(event) {\n\t\n    // Send an initial message\n    socket.send('I am the client and I\\'m listening!');\n    \n    // Listen for messages\n    socket.onmessage = function(event) {\n      console.log('Client received a message',event);\n    };\n    \n    // Listen for socket closes\n    socket.onclose = function(event) {\n      console.log('Client notified socket has closed',event);\n    };\n    \n    // To close the socket....\n    //socket.close()\n    \n  };\n}\n\n\nclass App extends Component {\n  render() {\n    startServerConnectoin();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}