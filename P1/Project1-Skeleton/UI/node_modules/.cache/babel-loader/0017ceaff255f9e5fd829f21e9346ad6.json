{"ast":null,"code":"import _regeneratorRuntime from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Button, ButtonGroup, InputGroupAddon, InputGroup, Input } from 'reactstrap';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.callBackendAPI =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:57000/express_backend', {\n                method: \"POST\",\n                // *GET, POST, PUT, DELETE, etc.\n                mode: \"cors\",\n                // no-cors, cors, *same-origin\n                headers: {\n                  \"Content-Type\": \"text/plain\"\n                },\n                body: document.location.host // body data type must match \"Content-Type\" header\n\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      client_id: '',\n      data: null\n    };\n    _this.onRadioBtnClick = _this.onRadioBtnClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getMail = _this.getMail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        client_id: document.location.host\n      }); // Call our fetch function below once the component mounts\n\n      this.callBackendAPI().then(function (res) {\n        return _this2.setState({\n          data: res.express\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      }); // initiate continuous calls for privmsg and channel msg's\n\n      this.getMail();\n    }\n  }, {\n    key: \"onRadioBtnClick\",\n    value: function () {\n      var _onRadioBtnClick = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var body_data, response, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(this.state.client_id);\n                body_data = {\n                  id: this.state.client_id\n                };\n                _context2.next = 4;\n                return fetch('http://localhost:57000/message', {\n                  method: \"POST\",\n                  // *GET, POST, PUT, DELETE, etc.\n                  mode: \"cors\",\n                  // no-cors, cors, *same-origin\n                  headers: {\n                    \"Content-Type\": \"text/plain\" // \"Content-Type\": \"application/x-www-form-urlencoded\",\n\n                  },\n                  body: this.state.client_id + '~' + document.getElementById('msg-input').value // body data type must match \"Content-Type\" header\n\n                });\n\n              case 4:\n                response = _context2.sent;\n                _context2.next = 7;\n                return response.json();\n\n              case 7:\n                res = _context2.sent;\n                _context2.t0 = alert;\n                _context2.next = 11;\n                return res.express;\n\n              case 11:\n                _context2.t1 = _context2.sent;\n                (0, _context2.t0)(_context2.t1);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function onRadioBtnClick() {\n        return _onRadioBtnClick.apply(this, arguments);\n      };\n    }() // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n  }, {\n    key: \"getMail\",\n    value: function () {\n      var _getMail = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var body_data, response, res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                body_data = {\n                  id: this.state.client_id\n                };\n                _context3.next = 3;\n                return fetch('http://localhost:57000/mail', {\n                  method: \"POST\",\n                  mode: \"cors\",\n                  headers: {\n                    \"Content-Type\": \"text/plain\"\n                  },\n                  body: this.state.client_id\n                });\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return response.json();\n\n              case 6:\n                res = _context3.sent;\n                _context3.t0 = alert;\n                _context3.next = 10;\n                return String(res.messages);\n\n              case 10:\n                _context3.t1 = _context3.sent;\n                (0, _context3.t0)(_context3.t1);\n                setTimeout(this.getMail, 5000);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function getMail() {\n        return _getMail.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Edit \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Learn React\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, document.location.host), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.data), React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this3.onRadioBtnClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Send\")), React.createElement(Input, {\n        id: \"msg-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/App.js"],"names":["React","Component","Button","ButtonGroup","InputGroupAddon","InputGroup","Input","App","props","callBackendAPI","fetch","method","mode","headers","body","document","location","host","response","json","status","Error","message","state","client_id","data","onRadioBtnClick","bind","getMail","setState","then","res","express","catch","err","console","log","body_data","id","getElementById","value","alert","String","messages","setTimeout","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, ButtonGroup, InputGroupAddon, InputGroup, Input } from 'reactstrap';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      client_id: '',\n      data: null\n    };\n    this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\n    this.getMail = this.getMail.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.setState({client_id: document.location.host});\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n    // initiate continuous calls for privmsg and channel msg's\n    this.getMail();\n  }\n\n  async onRadioBtnClick(){\n    console.log(this.state.client_id);\n    const body_data = {id: this.state.client_id}\n    const response = await fetch('http://localhost:57000/message', {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: this.state.client_id + '~' + document.getElementById('msg-input').value // body data type must match \"Content-Type\" header\n    });\n    const res = await response.json();\n    alert(await res.express);\n  }\n\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('http://localhost:57000/express_backend', {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n        },\n        body: document.location.host, // body data type must match \"Content-Type\" header\n    });\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  async getMail(){\n    const body_data = {id: this.state.client_id}\n    const response = await fetch('http://localhost:57000/mail', {\n        method: \"POST\",\n        mode: \"cors\", \n        headers: {\"Content-Type\": \"text/plain\"},\n        body: this.state.client_id\n    });\n    const res = await response.json();\n    alert(await String(res.messages));\n    setTimeout(this.getMail, 5000)\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <p>{document.location.host}</p>\n          <p>{this.state.data}</p>\n          \n          \n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <Button color=\"primary\" onClick={() => this.onRadioBtnClick()} >Send</Button>\n            </InputGroupAddon>\n            <Input id=\"msg-input\"/>\n          </InputGroup>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}