{"ast":null,"code":"import _classCallCheck from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/s/bach/k/under/dcdennis/CS457-UI/ui/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/s/bach/k/under/dcdennis/CS457-UI/ui/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nprocess.on('uncaughtException', function (e) {\n  console.error(e.stack || e.message);\n  console.error('errno = %j', global.errno);\n  process.exit(global.errno || 1);\n});\nvar PORT = 8080;\nvar TCP = process.binding('tcp_wrap').TCP;\nvar writeWaterMark = 1024 * 16;\nvar bufSize = 1024 * 1024;\nvar bufCount = 16;\nvar totalBuf = bufSize * bufCount; //\n// SERVER\n//\n\nvar serverHandle = new TCP(); // server.listen(PORT)\n\nvar r = serverHandle.bind('127.0.0.1', PORT);\n\nif (r) {\n  serverHandle.close();\n  throw new Error('bind');\n}\n\nserverHandle.onconnection = onconnection;\nvar r = serverHandle.listen(511);\n\nif (r) {\n  serverHandle.close();\n  throw new Error('listen');\n}\n\nconsole.log('listening');\n\nfunction onconnection(clientHandle) {\n  console.error('onconnection');\n  if (!clientHandle) throw new Error('connect');\n  clientHandle.server = true; // here goes the actual connection handler stuff\n\n  connectionHandler(clientHandle);\n}\n\nfunction connectionHandler(clientHandle, fn) {\n  clientHandle.onread = onread(selfPipe);\n  clientHandle.pendingWrites = 0;\n  clientHandle.readStart();\n} // socket.pipe(socket);\n\n\nfunction selfPipe(handle, chunk) {\n  var writeReq = handle.writeBuffer(chunk);\n  if (!writeReq || typeof writeReq !== 'object') throw new Error('write');\n  writeReq.oncomplete = afterWrite(selfPipeAfterWrite);\n  handle.pendingWrites++;\n  if (handle.writeQueueSize >= writeWaterMark) handle.readStop();\n}\n\nfunction selfPipeAfterWrite(handle, req) {\n  if (handle.writeQueueSize < writeWaterMark) handle.readStart();\n}\n\nfunction onread(fn) {\n  return function (buffer, offset, length) {\n    var handle = this;\n\n    if (buffer) {\n      if (length === 0) return;\n      var d = handle.server ? 'SERVER' : 'CLIENT';\n      if (!handle.totalRead) handle.totalRead = 0;\n      handle.totalRead += length;\n      console.error('%s ondata %j %j', d, length, handle.totalRead, totalBuf);\n      var chunk = buffer.slice(offset, offset + length);\n      fn(handle, chunk);\n    } else {\n      throw new Error('read');\n    }\n  };\n}\n\nfunction afterWrite(fn) {\n  return function (status, handle, req) {\n    if (status) throw new Error('write');\n    handle.pendingWrites--;\n    if (handle.shutdowning) return shutdownSoon(handle);\n    if (handle.destroying) return destroySoon(handle); // done with the write, start reading again.\n\n    fn(handle, req);\n  };\n}\n\nfunction destroySoon(handle) {\n  handle.destroying = true;\n  if (handle.pendingWrites === 0) return destroy(handle);\n}\n\nfunction destroy(handle) {\n  handle.close();\n\n  handle.onread = function () {};\n\n  if (handle.onclose) handle.onclose();\n} //\n// CLIENT\n//\n\n\nvar requestHandle = new TCP();\nrequestHandle.onread = onread(function (handle, chunk) {\n  console.error('CLIENT', chunk.length);\n});\n\nrequestHandle.onclose = function () {\n  console.error('CLIENT close');\n  serverHandle.close();\n};\n\nrequestHandle.pendingWrites = 0;\nvar connectReq = requestHandle.connect('127.0.0.1', PORT);\nif (!connectReq) throw new Error('connect (1)');\nconnectReq.oncomplete = afterConnect;\n\nfunction afterConnect(status, handle, req, readable, writable) {\n  if (status) throw new Error('connect (2)');\n  console.error('CLIENT connect r=%j w=%j', readable, writable);\n  handle.readStart();\n  clientWrite(handle);\n}\n\nfunction clientWrite(handle) {\n  // now just write a big thing\n  var writeReq = handle.writeBuffer(new Buffer(bufSize));\n  writeReq.oncomplete = afterWrite(function (handle, req) {\n    console.error('CLIENT finished writing');\n    if (--bufCount > 0) clientWrite(handle);else shutdownSoon(handle);\n  });\n  requestHandle.pendingWrites++;\n}\n\nfunction shutdownSoon(handle) {\n  handle.shutdowning = true;\n  if (handle.pendingWrites === 0) return shutdown(handle);\n}\n\nfunction shutdown(handle) {\n  var shutdownReq = handle.shutdown();\n  if (!shutdownReq) throw new Error('shutdown (1)');\n  shutdownReq.oncomplete = afterShutdown;\n}\n\nfunction afterShutdown(status, handle, req) {\n  if (status) throw new Error('shutdown (2)');\n}\n\nfunction startServerConnectoin() {\n  var socket = new WebSocket('ws://127.0.0.1:2000');\n\n  socket.onopen = function (event) {\n    // Send an initial message\n    socket.send('I am the client and I\\'m listening!'); // Listen for messages\n\n    socket.onmessage = function (event) {\n      console.log('Client received a message', event);\n    }; // Listen for socket closes\n\n\n    socket.onclose = function (event) {\n      console.log('Client notified socket has closed', event);\n    }; // To close the socket....\n    //socket.close()\n\n  };\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      startServerConnectoin();\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Edit \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Learn React\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/s/bach/k/under/dcdennis/CS457-UI/ui/src/App.js"],"names":["React","Component","process","on","e","console","error","stack","message","global","errno","exit","PORT","TCP","binding","writeWaterMark","bufSize","bufCount","totalBuf","serverHandle","r","bind","close","Error","onconnection","listen","log","clientHandle","server","connectionHandler","fn","onread","selfPipe","pendingWrites","readStart","handle","chunk","writeReq","writeBuffer","oncomplete","afterWrite","selfPipeAfterWrite","writeQueueSize","readStop","req","buffer","offset","length","d","totalRead","slice","status","shutdowning","shutdownSoon","destroying","destroySoon","destroy","onclose","requestHandle","connectReq","connect","afterConnect","readable","writable","clientWrite","Buffer","shutdown","shutdownReq","afterShutdown","startServerConnectoin","socket","WebSocket","onopen","event","send","onmessage","App","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nprocess.on('uncaughtException', function(e) {\n  console.error(e.stack || e.message);\n  console.error('errno = %j', global.errno);\n  process.exit(global.errno || 1);\n});\n\nvar PORT = 8080;\nvar TCP = process.binding('tcp_wrap').TCP;\nvar writeWaterMark = 1024 * 16;\nvar bufSize = 1024 * 1024;\nvar bufCount = 16;\nvar totalBuf = bufSize * bufCount;\n\n\n//\n// SERVER\n//\n\nvar serverHandle = new TCP();\n\n// server.listen(PORT)\nvar r = serverHandle.bind('127.0.0.1', PORT);\nif (r) {\n  serverHandle.close();\n  throw new Error('bind');\n}\n\nserverHandle.onconnection = onconnection;\n\nvar r = serverHandle.listen(511);\nif (r) {\n  serverHandle.close();\n  throw new Error('listen');\n}\n\nconsole.log('listening');\n\nfunction onconnection(clientHandle) {\n  console.error('onconnection');\n\n  if (!clientHandle)\n    throw new Error('connect');\n\n  clientHandle.server = true;\n\n  // here goes the actual connection handler stuff\n  connectionHandler(clientHandle);\n}\n\nfunction connectionHandler(clientHandle, fn) {\n  clientHandle.onread = onread(selfPipe)\n  clientHandle.pendingWrites = 0;\n  clientHandle.readStart();\n}\n\n// socket.pipe(socket);\nfunction selfPipe(handle, chunk) {\n  var writeReq = handle.writeBuffer(chunk);\n  if (!writeReq || typeof writeReq !== 'object')\n    throw new Error('write');\n\n  writeReq.oncomplete = afterWrite(selfPipeAfterWrite);\n\n  handle.pendingWrites++;\n\n  if (handle.writeQueueSize >= writeWaterMark)\n    handle.readStop();\n}\nfunction selfPipeAfterWrite(handle, req) {\n  if (handle.writeQueueSize < writeWaterMark)\n    handle.readStart();\n}\n\nfunction onread(fn) { return function(buffer, offset, length) {\n  var handle = this;\n\n  if (buffer) {\n    if (length === 0)\n      return;\n\n    var d = handle.server ? 'SERVER' : 'CLIENT';\n\n    if (!handle.totalRead)\n      handle.totalRead = 0;\n\n    handle.totalRead += length;\n\n    console.error('%s ondata %j %j', d, length, handle.totalRead, totalBuf);\n    var chunk = buffer.slice(offset, offset + length);\n    fn(handle, chunk);\n\n  } else {\n    throw new Error('read');\n  }\n}}\n\nfunction afterWrite(fn) { return function(status, handle, req) {\n  if (status)\n    throw new Error('write');\n\n  handle.pendingWrites--;\n\n  if (handle.shutdowning)\n    return shutdownSoon(handle);\n\n  if (handle.destroying)\n    return destroySoon(handle);\n\n  // done with the write, start reading again.\n  fn(handle, req);\n}}\n\nfunction destroySoon(handle) {\n  handle.destroying = true;\n  if (handle.pendingWrites === 0)\n    return destroy(handle);\n}\n\nfunction destroy(handle) {\n  handle.close();\n  handle.onread = function() {};\n\n  if (handle.onclose)\n    handle.onclose();\n}\n\n\n\n//\n// CLIENT\n//\n\nvar requestHandle = new TCP();\nrequestHandle.onread = onread(function(handle, chunk) {\n  console.error('CLIENT', chunk.length);\n});\n\nrequestHandle.onclose = function() {\n  console.error('CLIENT close');\n  serverHandle.close();\n};\n\nrequestHandle.pendingWrites = 0;\n\nvar connectReq = requestHandle.connect('127.0.0.1', PORT);\nif (!connectReq)\n  throw new Error('connect (1)');\nconnectReq.oncomplete = afterConnect;\n\nfunction afterConnect(status, handle, req, readable, writable) {\n  if (status)\n    throw new Error('connect (2)');\n\n  console.error('CLIENT connect r=%j w=%j', readable, writable);\n\n  handle.readStart();\n\n  clientWrite(handle);\n}\n\nfunction clientWrite(handle) {\n  // now just write a big thing\n  var writeReq = handle.writeBuffer(new Buffer(bufSize));\n  writeReq.oncomplete = afterWrite(function(handle, req) {\n    console.error('CLIENT finished writing');\n    if (-- bufCount > 0)\n      clientWrite(handle);\n    else\n      shutdownSoon(handle);\n  });\n  requestHandle.pendingWrites++;\n}\n\nfunction shutdownSoon(handle) {\n  handle.shutdowning = true;\n  if (handle.pendingWrites === 0)\n    return shutdown(handle);\n}\n\nfunction shutdown(handle) {\n  var shutdownReq = handle.shutdown();\n  if (!shutdownReq)\n    throw new Error('shutdown (1)');\n  shutdownReq.oncomplete = afterShutdown;\n}\n\nfunction afterShutdown(status, handle, req) {\n  if (status)\n    throw new Error('shutdown (2)');\n}\nfunction startServerConnectoin() {\n  var socket = new WebSocket('ws://127.0.0.1:2000');\n  socket.onopen = function(event) {\n\t\n    // Send an initial message\n    socket.send('I am the client and I\\'m listening!');\n    \n    // Listen for messages\n    socket.onmessage = function(event) {\n      console.log('Client received a message',event);\n    };\n    \n    // Listen for socket closes\n    socket.onclose = function(event) {\n      console.log('Client notified socket has closed',event);\n    };\n    \n    // To close the socket....\n    //socket.close()\n    \n  };\n}\n\n\nclass App extends Component {\n  render() {\n    startServerConnectoin();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}