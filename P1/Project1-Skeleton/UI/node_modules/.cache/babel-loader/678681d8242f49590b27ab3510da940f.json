{"ast":null,"code":"import _regeneratorRuntime from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Button, ButtonGroup, InputGroupAddon, InputGroup, Input, TabContent, TabPane, Nav, NavItem, NavLink, Card, CardTitle, CardText, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Row, Col, Table } from 'reactstrap';\nimport classnames from 'classnames';\nimport Messages from \"./Messages\";\nimport MessageTable from './HashTable';\nimport LoginModal from './Login.js';\n\nfunction randomName() {\n  var adjectives = [\"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\", \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\", \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\", \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\", \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\", \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\", \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\", \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\", \"ancient\", \"purple\", \"lively\", \"nameless\"];\n  var nouns = [\"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\", \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\", \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\", \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\", \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\", \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\", \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\", \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\", \"smoke\", \"star\"];\n  var adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  var noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n\nvar input = document.getElementById(\"msg-input\"); // Execute a function when the user releases a key on the keyboard\n\ninput.addEventListener(\"keyup\", function (event) {\n  // Cancel the default action, if needed\n  event.preventDefault(); // Number 13 is the \"Enter\" key on the keyboard\n\n  if (event.keyCode === 13) {\n    // Trigger the button element with a click\n    document.getElementById(\"btnSearch\").click();\n  }\n});\n\nvar sleep = function sleep(milliseconds) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, milliseconds);\n  });\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.callBackendAPI_User =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(username, password) {\n        var response, body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('http://localhost:57000/express_backend_user', {\n                  method: \"POST\",\n                  // *GET, POST, PUT, DELETE, etc.\n                  mode: \"cors\",\n                  // no-cors, cors, *same-origin\n                  headers: {\n                    \"Content-Type\": \"text/plain\"\n                  },\n                  body: _this.state.client_id + '~' + username + \"~\" + password // body data type must match \"Content-Type\" header\n\n                });\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                body = _context.sent;\n\n                if (!(response.status !== 200)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw Error(body.message);\n\n              case 8:\n                return _context.abrupt(\"return\", body);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.callBackendAPI =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch('http://localhost:57000/express_backend', {\n                method: \"POST\",\n                // *GET, POST, PUT, DELETE, etc.\n                mode: \"cors\",\n                // no-cors, cors, *same-origin\n                headers: {\n                  \"Content-Type\": \"text/plain\"\n                },\n                body: _this.state.client_id // body data type must match \"Content-Type\" header\n\n              });\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context2.sent;\n\n              if (!(response.status !== 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context2.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.getMail =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var body_data, response, res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              body_data = {\n                id: _this.state.client_id\n              };\n              _context3.next = 3;\n              return fetch('http://localhost:57000/mail', {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: {\n                  \"Content-Type\": \"text/plain\"\n                },\n                body: _this.state.client_id\n              });\n\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return response.json();\n\n            case 6:\n              res = _context3.sent;\n\n              //alert(JSON.stringify(res));\n              if (res.messages != \"null\") {\n                _this.processMail(res);\n              }\n\n              setTimeout(_this.getMail, 5000);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.state = {\n      name: 'Guest',\n      buttonLabel: 'connect',\n      activeTable: 'server',\n      client_id: 'disconnected',\n      data: null,\n      tabs: {\n        'tab-1': '1'\n      },\n      tabsList: ['server'],\n      activeTab: 'server',\n      messagesTable: new MessageTable(10),\n      messages: [],\n      user: {\n        id: 'user',\n        username: randomName(),\n        color: randomColor()\n      },\n      server: {\n        id: 'server',\n        username: 'server',\n        color: randomColor()\n      },\n      receivers: new MessageTable(10) //bad practice but this will hold bubbles in the format <id: {id: 'server', username, color}> \n\n    };\n    _this.sendMessage = _this.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getMail = _this.getMail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderTabs = _this.renderTabs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearMessages = _this.clearMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getReceiverID = _this.getReceiverID.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.processMail = _this.processMail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.signinGuest = _this.signinGuest.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.disconnect = _this.disconnect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.signinUser = _this.signinUser.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.callBackendAPI_User = _this.callBackendAPI_User.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var table = this.state.messagesTable;\n      table.insert('server', []);\n      this.setState({\n        messagesTable: table\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// Call our fetch function below once the component mounts\n      //this.callBackendAPI()\n      // .then(res => this.setState({ data: res.express }))\n      // .catch(err => console.log(err));\n      // initiate continuous calls to clients mail box\n      //this.getMail();\n    }\n  }, {\n    key: \"signinGuest\",\n    value: function signinGuest() {\n      var _this2 = this;\n\n      this.setState({\n        client_id: document.location.host + ':' + this.state.name\n      });\n      sleep(500).then(function () {\n        _this2.callBackendAPI().then(function (res) {\n          return _this2.setState({\n            data: res.express\n          });\n        }).catch(function (err) {\n          return console.log(err);\n        }); // initiate continuous calls to clients mail box\n\n\n        _this2.getMail();\n      });\n      this.setState({\n        buttonLabel: 'disconnect'\n      });\n    }\n  }, {\n    key: \"signinUser\",\n    value: function signinUser(username, password) {\n      var _this3 = this;\n\n      this.setState({\n        name: username,\n        client_id: document.location.host + ':' + username\n      });\n      sleep(500).then(function () {\n        _this3.callBackendAPI_User(username, password).then(function (res) {\n          return _this3.setState({\n            data: res.express\n          });\n        }).catch(function (err) {\n          return console.log(err);\n        }); // initiate continuous calls to clients mail box\n\n\n        _this3.getMail();\n      });\n      this.setState({\n        buttonLabel: 'disconnect'\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var table, messages, body_data, response, res, message_list, i, updateTable;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.setState({\n                  client_id: 'disconnected',\n                  buttonLabel: 'connect'\n                });\n                table = this.state.messagesTable;\n                messages = table.get(this.state.activeTable);\n                messages.push({\n                  text: document.getElementById('msg-input').value,\n                  member: this.state.user\n                });\n                table.insert(this.state.activeTable, messages);\n                this.setState({\n                  messagesTable: table\n                });\n                console.log(this.state.client_id);\n                body_data = {\n                  id: this.state.client_id\n                };\n                _context4.next = 10;\n                return fetch('http://localhost:57000/message', {\n                  method: \"POST\",\n                  // *GET, POST, PUT, DELETE, etc.\n                  mode: \"cors\",\n                  // no-cors, cors, *same-origin\n                  headers: {\n                    \"Content-Type\": \"text/plain\" // \"Content-Type\": \"application/x-www-form-urlencoded\",\n\n                  },\n                  body: this.state.client_id + '~' + \"/quit\" // body data type must match \"Content-Type\" header\n\n                });\n\n              case 10:\n                response = _context4.sent;\n                _context4.next = 13;\n                return response.json();\n\n              case 13:\n                res = _context4.sent;\n\n                //alert(await res.express);\n                if (res.express != \"null\") {\n                  table = this.state.messagesTable;\n                  message_list = table.get(this.state.activeTable);\n\n                  for (i = 0; i < res.express.split('~').length; i++) {\n                    message_list.push({\n                      text: res.express.split('~')[i],\n                      member: this.state.server\n                    });\n                  } //this.setState({messages: message_list});\n\n\n                  updateTable = this.state.messagesTable;\n                  updateTable.insert(this.state.activeTable, message_list);\n                  this.setState({\n                    messagesTable: updateTable\n                  });\n                } //this.clearMessages();\n\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function disconnect() {\n        return _disconnect.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"toggle\",\n    value: function toggle(tab) {\n      if (this.state.activeTab !== tab) {\n        this.setState({\n          activeTab: tab,\n          activeTable: tab\n        });\n      }\n    }\n  }, {\n    key: \"clearMessages\",\n    value: function clearMessages() {\n      //this.setState({messages: []});\n      var table = this.state.messagesTable;\n      table.insert(this.state.activeTable, []);\n      this.setState({\n        messagesTable: table\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var table, messages, bubble_message, body_data, response, res, message_list, i, updateTable;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.state.client_id === \"disconnected\")) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                table = this.state.messagesTable;\n                messages = table.get(this.state.activeTable);\n                messages.push({\n                  text: document.getElementById('msg-input').value,\n                  member: this.state.user\n                });\n                messages.push({\n                  text: \"You are disconnected, please connect.\",\n                  member: this.state.server\n                });\n                table.insert(this.state.activeTable, messages);\n                this.setState({\n                  messagesTable: table\n                });\n                _context5.next = 26;\n                break;\n\n              case 9:\n                table = this.state.messagesTable;\n                messages = table.get(this.state.activeTable);\n                bubble_message = document.getElementById('msg-input').value;\n                messages.push({\n                  text: document.getElementById('msg-input').value,\n                  member: this.state.user\n                });\n                table.insert(this.state.activeTable, messages);\n                this.setState({\n                  messagesTable: table\n                });\n                console.log(this.state.client_id);\n                body_data = {\n                  id: this.state.client_id\n                };\n\n                if (this.state.activeTab != 'server' && this.state.activeTab.charAt(0) == '#') {\n                  bubble_message = \"/msg \" + this.state.activeTab.slice(1, this.state.activeTab.length) + ' ' + bubble_message;\n                }\n\n                if (this.state.activeTab != 'server' && this.state.activeTab.charAt(0) != '#') {\n                  bubble_message = \"/privmsg \" + this.state.activeTab + ' ' + bubble_message;\n                }\n\n                _context5.next = 21;\n                return fetch('http://localhost:57000/message', {\n                  method: \"POST\",\n                  // *GET, POST, PUT, DELETE, etc.\n                  mode: \"cors\",\n                  // no-cors, cors, *same-origin\n                  headers: {\n                    \"Content-Type\": \"text/plain\" // \"Content-Type\": \"application/x-www-form-urlencoded\",\n\n                  },\n                  body: this.state.client_id + '~' + bubble_message // body data type must match \"Content-Type\" header\n\n                });\n\n              case 21:\n                response = _context5.sent;\n                _context5.next = 24;\n                return response.json();\n\n              case 24:\n                res = _context5.sent;\n\n                //alert(await res.express);\n                if (res.express != \"null\") {\n                  table = this.state.messagesTable;\n                  message_list = table.get(this.state.activeTable);\n\n                  for (i = 0; i < res.express.split('~').length; i++) {\n                    message_list.push({\n                      text: res.express.split('~')[i],\n                      member: this.state.server\n                    });\n                  } //this.setState({messages: message_list});\n\n\n                  updateTable = this.state.messagesTable;\n                  updateTable.insert(this.state.activeTable, message_list);\n                  this.setState({\n                    messagesTable: updateTable\n                  });\n                }\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function sendMessage() {\n        return _sendMessage.apply(this, arguments);\n      };\n    }() // Fetches our POST route from the Express server. (Note the route we are fetching matches the POST route from server.js\n\n  }, {\n    key: \"getReceiverID\",\n    value: function getReceiverID(message) {\n      var id = message.substring(message.indexOf(\"<\") + 1);\n      id = id.substring(0, id.indexOf(\">\"));\n      return id;\n    } // handles UI processing for new mail\n\n  }, {\n    key: \"processMail\",\n    value: function processMail(res) {\n      //parse out id and msg... <id> msg\n      for (var m = 0; m < res.messages.split('~').length; m++) {\n        var message = res.messages.split('~')[m];\n\n        if (message === 'null') {\n          continue;\n        }\n\n        var id = this.getReceiverID(message);\n        var chan_user = 'null';\n        var isChannelMsg = false;\n\n        if (id.charAt(0) === '#') {\n          id = id.substring(0, id.indexOf(\":\"));\n          chan_user = message.substring(message.indexOf(\":\") + 1);\n          chan_user = chan_user.substring(0, chan_user.indexOf(\">\"));\n          isChannelMsg = true;\n        }\n\n        var msg = message.substring(message.indexOf(\">\") + 1);\n        var user_table = this.state.receivers;\n        var bubble = user_table.get(id);\n\n        if (isChannelMsg) {\n          bubble = user_table.get(chan_user);\n        }\n\n        if (bubble == null) {\n          // create bubble for user if not found\n          if (isChannelMsg) {\n            user_table.insert(chan_user, {\n              id: chan_user,\n              username: chan_user,\n              color: randomColor()\n            });\n            this.setState({\n              receivers: user_table\n            });\n            user_table = this.state.receivers;\n            bubble = user_table.get(chan_user);\n          } else {\n            user_table.insert(id, {\n              id: id,\n              username: id,\n              color: randomColor()\n            });\n            this.setState({\n              receivers: user_table\n            });\n            user_table = this.state.receivers;\n            bubble = user_table.get(id);\n          }\n        }\n\n        var table = this.state.messagesTable;\n        var messages = table.get(id);\n\n        if (messages == null) {\n          // received message from a new channel or user.. create tab and add data to the respective messages array\n          messages = [];\n          messages.push({\n            text: msg,\n            member: bubble\n          });\n          table.insert(id, messages);\n          this.setState({\n            messagesTable: table,\n            activeTab: id\n          }); // add message\n\n          var tabList = this.state.tabsList;\n\n          if (!tabList.includes(id)) {\n            tabList.push(id);\n            this.setState({\n              tabsList: tabList\n            }); // add tab to list if needed\n          }\n        } else {\n          messages.push({\n            text: msg,\n            member: bubble\n          });\n          table.insert(id, messages);\n          this.setState({\n            messagesTable: table\n          }); // add message\n        }\n\n        this.setState({\n          activeTable: id\n        }); // change tab\n      }\n    } // Fetches all unread mailing waiting for this client on the Express server. Gets called every 5 seconds\n\n  }, {\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var _this4 = this;\n\n      var tabs = this.state.tabsList.map(function (item) {\n        return React.createElement(NavItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          className: classnames({\n            active: _this4.state.activeTab === item\n          }),\n          onClick: function onClick() {\n            _this4.toggle(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394\n          },\n          __self: this\n        }, item));\n      });\n      return React.createElement(Nav, {\n        tabs: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, tabs);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"chat-ui\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, \"IRC Chat App\"), React.createElement(LoginModal, {\n        buttonLabel: this.state.buttonLabel,\n        className: \"Auth\",\n        guest_sign_in: this.signinGuest,\n        disconnect: this.disconnect,\n        user_sign_in: this.signinUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }), this.renderTabs()), React.createElement(\"div\", {\n        className: \"chat-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, React.createElement(Messages, {\n        messages: this.state.messagesTable.get(this.state.activeTable),\n        currentMember: this.state.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"chat-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        id: \"btnSearch\",\n        onClick: function onClick() {\n          return _this5.sendMessage();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, \"Send\")), React.createElement(Input, {\n        id: \"msg-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this5.clearMessages();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }, \"Clear Chat\")))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/App.js"],"names":["React","Component","Button","ButtonGroup","InputGroupAddon","InputGroup","Input","TabContent","TabPane","Nav","NavItem","NavLink","Card","CardTitle","CardText","ButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","Row","Col","Table","classnames","Messages","MessageTable","LoginModal","randomName","adjectives","nouns","adjective","Math","floor","random","length","noun","randomColor","toString","input","document","getElementById","addEventListener","event","preventDefault","keyCode","click","sleep","milliseconds","Promise","resolve","setTimeout","App","props","callBackendAPI_User","username","password","fetch","method","mode","headers","body","state","client_id","response","json","status","Error","message","callBackendAPI","getMail","body_data","id","res","messages","processMail","name","buttonLabel","activeTable","data","tabs","tabsList","activeTab","messagesTable","user","color","server","receivers","sendMessage","bind","toggle","renderTabs","clearMessages","getReceiverID","signinGuest","disconnect","signinUser","table","insert","setState","location","host","then","express","catch","err","console","log","get","push","text","value","member","message_list","i","split","updateTable","tab","bubble_message","charAt","slice","substring","indexOf","m","chan_user","isChannelMsg","msg","user_table","bubble","tabList","includes","map","item","active"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {  Button, ButtonGroup, InputGroupAddon, InputGroup, Input, \n          TabContent, TabPane, Nav, NavItem, NavLink, Card, CardTitle, CardText,\n          ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem , Row, Col, Table } from 'reactstrap';\nimport classnames from 'classnames';\nimport Messages from \"./Messages\";\nimport MessageTable from './HashTable';\nimport LoginModal from './Login.js';\n\nfunction randomName() {\n  const adjectives = [\"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\", \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\", \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\", \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\", \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\", \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\", \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\", \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\", \"ancient\", \"purple\", \"lively\", \"nameless\"];\n  const nouns = [\"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\", \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\", \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\", \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\", \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\", \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\", \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\", \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\", \"smoke\", \"star\"];\n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n\nvar input = document.getElementById(\"msg-input\");\n\n// Execute a function when the user releases a key on the keyboard\ninput.addEventListener(\"keyup\", function(event) {\n  // Cancel the default action, if needed\n  event.preventDefault();\n  // Number 13 is the \"Enter\" key on the keyboard\n  if (event.keyCode === 13) {\n    // Trigger the button element with a click\n    document.getElementById(\"btnSearch\").click();\n  }\n});\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name : 'Guest',\n      buttonLabel: 'connect',\n      activeTable: 'server',\n      client_id: 'disconnected',\n      data: null,\n      tabs: {'tab-1': '1'},\n      tabsList: ['server'],\n      activeTab: 'server',\n      messagesTable: new MessageTable(10),\n      messages: [],\n      user: {\n        id: 'user',\n        username: randomName(),\n        color: randomColor()\n      },\n      server: {\n        id: 'server',\n        username: 'server',\n        color: randomColor()\n      },\n      receivers: new MessageTable(10) //bad practice but this will hold bubbles in the format <id: {id: 'server', username, color}> \n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.getMail = this.getMail.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.renderTabs = this.renderTabs.bind(this);\n    this.clearMessages = this.clearMessages.bind(this);\n    this.getReceiverID = this.getReceiverID.bind(this);\n    this.processMail = this.processMail.bind(this);\n    this.signinGuest = this.signinGuest.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.signinUser = this.signinUser.bind(this);\n    this.callBackendAPI_User = this.callBackendAPI_User.bind(this);\n  }\n  componentWillMount(){\n    var table = this.state.messagesTable;\n    table.insert('server', []);\n    this.setState({messagesTable: table});\n  }\n  componentDidMount() {\n    \n    // Call our fetch function below once the component mounts\n    //this.callBackendAPI()\n     // .then(res => this.setState({ data: res.express }))\n     // .catch(err => console.log(err));\n    // initiate continuous calls to clients mail box\n    //this.getMail();\n  }\n\n  signinGuest(){\n    this.setState({client_id: document.location.host+ ':' + this.state.name});\n    sleep(500).then(() => {\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n    // initiate continuous calls to clients mail box\n    this.getMail();\n    });\n    this.setState({buttonLabel: 'disconnect'});\n  }\n\n  signinUser(username, password){\n    this.setState({name: username, client_id: document.location.host+ ':' + username});\n    sleep(500).then(() => {\n      this.callBackendAPI_User(username, password)\n        .then(res => this.setState({ data: res.express }))\n        .catch(err => console.log(err));\n      // initiate continuous calls to clients mail box\n      this.getMail();\n      });\n      this.setState({buttonLabel: 'disconnect'});\n  }\n\n  callBackendAPI_User = async (username, password) => {\n    const response = await fetch('http://localhost:57000/express_backend_user', {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n        },\n        body: this.state.client_id + '~' + username + \"~\" + password, // body data type must match \"Content-Type\" header\n    });\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n    \n  }\n\n  async disconnect(){\n    this.setState({client_id: 'disconnected', buttonLabel: 'connect'});\n    var table = this.state.messagesTable;\n    var messages = table.get(this.state.activeTable);\n\n    messages.push({\n      text: document.getElementById('msg-input').value,\n      member: this.state.user\n    });\n    table.insert(this.state.activeTable, messages);\n    this.setState({messagesTable: table});\n\n    console.log(this.state.client_id);\n    const body_data = {id: this.state.client_id}\n    const response = await fetch('http://localhost:57000/message', {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: this.state.client_id + '~' + \"/quit\"// body data type must match \"Content-Type\" header\n    });\n    const res = await response.json();\n    //alert(await res.express);\n    if(res.express != \"null\"){\n      var table = this.state.messagesTable;\n      var message_list = table.get(this.state.activeTable);\n      \n        for(var i=0; i < res.express.split('~').length; i++){ \n          message_list.push({\n            text: res.express.split('~')[i],\n            member: this.state.server\n          });\n          \n        }\n        //this.setState({messages: message_list});\n        var updateTable = this.state.messagesTable;\n        updateTable.insert(this.state.activeTable, message_list);\n      \n        this.setState({messagesTable: updateTable})\n        \n      }\n\n    //this.clearMessages();\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab,\n        activeTable: tab\n      });\n    }\n  }\n\n  clearMessages(){\n    //this.setState({messages: []});\n    var table = this.state.messagesTable;\n    table.insert(this.state.activeTable, []);\n    this.setState({messagesTable: table});\n  }\n\n\n  async sendMessage(){\n   \n    if(this.state.client_id === \"disconnected\"){\n      var table = this.state.messagesTable;\n      var messages = table.get(this.state.activeTable);\n      messages.push({\n        text: document.getElementById('msg-input').value,\n        member: this.state.user\n      });\n      messages.push({\n        text: \"You are disconnected, please connect.\",\n        member: this.state.server\n      });\n      table.insert(this.state.activeTable, messages);\n      this.setState({messagesTable: table});\n    }\n    else{\n      var table = this.state.messagesTable;\n      var messages = table.get(this.state.activeTable);\n      var bubble_message = document.getElementById('msg-input').value;\n      \n      messages.push({\n        text: document.getElementById('msg-input').value,\n        member: this.state.user\n      });\n      table.insert(this.state.activeTable, messages);\n      this.setState({messagesTable: table});\n\n    console.log(this.state.client_id);\n    const body_data = {id: this.state.client_id}\n    if(this.state.activeTab != 'server' && this.state.activeTab.charAt(0) == '#'){\n      \n      bubble_message = \"/msg \" + this.state.activeTab.slice(1,this.state.activeTab.length) +' '+ bubble_message;   \n    }\n    if(this.state.activeTab != 'server' && this.state.activeTab.charAt(0) != '#'){\n      \n      bubble_message = \"/privmsg \" + this.state.activeTab + ' '+ bubble_message;   \n    }\n\n    const response = await fetch('http://localhost:57000/message', {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: this.state.client_id + '~' + bubble_message // body data type must match \"Content-Type\" header\n    });\n    const res = await response.json();\n    //alert(await res.express);\n    if(res.express != \"null\"){\n      var table = this.state.messagesTable;\n      var message_list = table.get(this.state.activeTable);\n      \n        for(var i=0; i < res.express.split('~').length; i++){ \n          message_list.push({\n            text: res.express.split('~')[i],\n            member: this.state.server\n          });\n          \n        }\n        //this.setState({messages: message_list});\n        var updateTable = this.state.messagesTable;\n        updateTable.insert(this.state.activeTable, message_list);\n      \n        this.setState({messagesTable: updateTable})\n        \n      }\n    }\n    }\n  \n\n  // Fetches our POST route from the Express server. (Note the route we are fetching matches the POST route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('http://localhost:57000/express_backend', {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        headers: {\n            \"Content-Type\": \"text/plain\"\n        },\n        body: this.state.client_id, // body data type must match \"Content-Type\" header\n    });\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  getReceiverID(message){\n    var id = message.substring(message.indexOf(\"<\") + 1);\n    id = id.substring(0, id.indexOf(\">\"));\n    return id;\n  }\n\n  // handles UI processing for new mail\n  processMail(res){\n    //parse out id and msg... <id> msg\n    for(var m=0; m < res.messages.split('~').length; m++){\n      var message = res.messages.split('~')[m];\n      if(message === 'null'){continue;}\n      var id = this.getReceiverID(message);\n      var chan_user = 'null';\n      var isChannelMsg = false;\n      if(id.charAt(0)==='#'){\n        id = id.substring(0, id.indexOf(\":\"))\n        chan_user = message.substring(message.indexOf(\":\") + 1);\n        chan_user = chan_user.substring(0, chan_user.indexOf(\">\"));\n        isChannelMsg = true;\n      }\n    \n      var msg = message.substring(message.indexOf(\">\") + 1);\n\n      var user_table = this.state.receivers;\n\n      var bubble = user_table.get(id); \n      if(isChannelMsg){\n        bubble = user_table.get(chan_user);\n      }\n      if (bubble == null){ // create bubble for user if not found\n        if(isChannelMsg){\n          user_table.insert(chan_user, {\n            id: chan_user,\n            username: chan_user,\n            color: randomColor()\n          });\n          this.setState({receivers: user_table});\n          user_table = this.state.receivers;\n          bubble = user_table.get(chan_user);\n        }\n        else{\n          user_table.insert(id, {\n            id: id,\n            username: id,\n            color: randomColor()\n          });\n          this.setState({receivers: user_table});\n          user_table = this.state.receivers;\n          bubble = user_table.get(id);\n        }\n      }\n\n      var table = this.state.messagesTable;\n      var messages = table.get(id);\n\n      if(messages == null){ // received message from a new channel or user.. create tab and add data to the respective messages array\n        messages = [];\n        \n        messages.push({\n              text: msg,\n              member: bubble\n        });\n      \n        table.insert(id, messages);\n        this.setState({messagesTable: table, activeTab: id}); // add message\n        var tabList = this.state.tabsList;\n       \n        if(!tabList.includes(id)){\n          tabList.push(id);\n          this.setState({tabsList: tabList}); // add tab to list if needed\n        }\n      }\n      else{\n        \n        messages.push({\n            text: msg,\n            member: bubble\n        });\n        \n        table.insert(id, messages);\n        this.setState({messagesTable: table}); // add message\n      }\n      this.setState({activeTable: id}); // change tab\n    }\n  }\n  // Fetches all unread mailing waiting for this client on the Express server. Gets called every 5 seconds\n  getMail = async() => {\n    const body_data = {id: this.state.client_id}\n    const response = await fetch('http://localhost:57000/mail', {\n        method: \"POST\",\n        mode: \"cors\", \n        headers: {\"Content-Type\": \"text/plain\"},\n        body: this.state.client_id\n    });\n    const res = await response.json();\n    //alert(JSON.stringify(res));\n    if(res.messages != \"null\"){\n      this.processMail(res);\n    }\n    setTimeout(this.getMail, 5000)\n  }\n  \n  renderTabs(){\n    const tabs = this.state.tabsList.map(item => <NavItem><NavLink className={classnames({ active: this.state.activeTab === item })}\n    onClick={() => { this.toggle(item); }}>{item}</NavLink></NavItem> );\n    return (\n      <Nav tabs>\n       {tabs}\n      </Nav>\n    );\n                    \n  }\n  \n  render() {\n    return (\n      \n      <div className=\"App\">\n        \n        <section className=\"chat-ui\">\n          <div className=\"chat-header\">\n          <h1>IRC Chat App</h1>\n          <LoginModal buttonLabel={this.state.buttonLabel} className='Auth'  guest_sign_in ={this.signinGuest} disconnect={this.disconnect} user_sign_in={this.signinUser} />\n          {this.renderTabs()}\n          </div>\n          <div className=\"chat-messages\">\n            <Messages messages={this.state.messagesTable.get(this.state.activeTable)} currentMember={this.state.user}/>\n          </div>\n          \n        </section>\n        <div className=\"chat-input\">\n            <InputGroup>\n              <InputGroupAddon addonType=\"prepend\">\n                <Button type=\"submit\" color=\"primary\" id=\"btnSearch\" onClick={() => this.sendMessage()} >Send</Button>\n              </InputGroupAddon>\n              <Input id=\"msg-input\" />\n              <InputGroupAddon addonType=\"prepend\">\n                <Button color=\"primary\" onClick={() => this.clearMessages()} >Clear Chat</Button>\n              </InputGroupAddon>\n            </InputGroup>\n        </div>\n        \n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}