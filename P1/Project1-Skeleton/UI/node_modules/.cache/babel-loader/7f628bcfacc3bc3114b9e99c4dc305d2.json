{"ast":null,"code":"import _createClass from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar Node = function Node(key, value) {\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = null;\n};\n\nvar MessageTable =\n/*#__PURE__*/\nfunction () {\n  function MessageTable(size) {\n    _classCallCheck(this, MessageTable);\n\n    this.cells = new Array(size);\n  }\n\n  _createClass(MessageTable, [{\n    key: \"hash\",\n    value: function hash(key) {\n      var total = 0;\n\n      for (var i = 0; i < key.length; i++) {\n        total += key.charCodeAt(i);\n      }\n\n      return total % this.cells.length;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      var hash = this.hash(key);\n\n      if (!this.cells[hash]) {\n        this.cells[hash] = new Node(key, value);\n      } else if (this.cells[hash].key === key) {\n        this.cells[hash].value = value;\n      } else {\n        var node = this.cells[hash];\n\n        while (node.next) {\n          if (node.next.key === key) {\n            node.next.value = value;\n            return;\n          }\n\n          node = node.next;\n        }\n\n        node.next = new Node(key, value);\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var hash = this.hash(key);\n      if (!this.cells[hash]) return null;else {\n        var node = this.cells[hash];\n\n        while (node) {\n          if (node.key === key) return node.value;\n          node = node.next;\n        }\n\n        return null;\n      }\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var table = [];\n\n      for (var i = 0; i < this.cells.length; i++) {\n        var cell = [];\n        var node = this.cells[i];\n\n        while (node) {\n          cell.push(node.value);\n          node = node.next;\n        }\n\n        table.push(cell);\n      }\n\n      return table;\n    }\n  }]);\n\n  return MessageTable;\n}(); //export const MTable = 'MessageTable';\n\n\nexport default MessageTable;","map":{"version":3,"sources":["/s/bach/k/under/dcdennis/CS457/P1/Project1-Skeleton/UI/src/HashTable.js"],"names":["Node","key","value","next","MessageTable","size","cells","Array","total","i","length","charCodeAt","hash","node","table","cell","push"],"mappings":";;;IAAMA,I,GACF,cAAYC,GAAZ,EAAiBC,KAAjB,EAAwB;AAAA;;AACpB,OAAKD,GAAL,GAAWA,GAAX;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAY,IAAZ;AACH,C;;IAGCC,Y;;;AACF,wBAAYC,IAAZ,EAAkB;AAAA;;AACd,SAAKC,KAAL,GAAa,IAAIC,KAAJ,CAAUF,IAAV,CAAb;AACH;;;;yBAEIJ,G,EAAK;AACN,UAAIO,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACS,MAAxB,EAAgCD,CAAC,EAAjC;AAAqCD,QAAAA,KAAK,IAAIP,GAAG,CAACU,UAAJ,CAAeF,CAAf,CAAT;AAArC;;AACA,aAAOD,KAAK,GAAG,KAAKF,KAAL,CAAWI,MAA1B;AACH;;;2BAEMT,G,EAAKC,K,EAAO;AACf,UAAMU,IAAI,GAAG,KAAKA,IAAL,CAAUX,GAAV,CAAb;;AACA,UAAI,CAAC,KAAKK,KAAL,CAAWM,IAAX,CAAL,EAAuB;AACnB,aAAKN,KAAL,CAAWM,IAAX,IAAmB,IAAIZ,IAAJ,CAASC,GAAT,EAAcC,KAAd,CAAnB;AACH,OAFD,MAEO,IAAI,KAAKI,KAAL,CAAWM,IAAX,EAAiBX,GAAjB,KAAyBA,GAA7B,EAAkC;AACrC,aAAKK,KAAL,CAAWM,IAAX,EAAiBV,KAAjB,GAAyBA,KAAzB;AACH,OAFM,MAEA;AACH,YAAIW,IAAI,GAAG,KAAKP,KAAL,CAAWM,IAAX,CAAX;;AACA,eAAOC,IAAI,CAACV,IAAZ,EAAkB;AACd,cAAIU,IAAI,CAACV,IAAL,CAAUF,GAAV,KAAkBA,GAAtB,EAA2B;AACvBY,YAAAA,IAAI,CAACV,IAAL,CAAUD,KAAV,GAAkBA,KAAlB;AACA;AACH;;AACDW,UAAAA,IAAI,GAAGA,IAAI,CAACV,IAAZ;AACH;;AACDU,QAAAA,IAAI,CAACV,IAAL,GAAY,IAAIH,IAAJ,CAASC,GAAT,EAAcC,KAAd,CAAZ;AACH;AACJ;;;wBAEGD,G,EAAK;AACL,UAAMW,IAAI,GAAG,KAAKA,IAAL,CAAUX,GAAV,CAAb;AACA,UAAI,CAAC,KAAKK,KAAL,CAAWM,IAAX,CAAL,EAAuB,OAAO,IAAP,CAAvB,KACK;AACD,YAAIC,IAAI,GAAG,KAAKP,KAAL,CAAWM,IAAX,CAAX;;AACA,eAAOC,IAAP,EAAa;AACT,cAAIA,IAAI,CAACZ,GAAL,KAAaA,GAAjB,EAAsB,OAAOY,IAAI,CAACX,KAAZ;AACtBW,UAAAA,IAAI,GAAGA,IAAI,CAACV,IAAZ;AACH;;AACD,eAAO,IAAP;AACH;AACJ;;;6BAEQ;AACL,UAAMW,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,KAAL,CAAWI,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,YAAMM,IAAI,GAAG,EAAb;AACA,YAAIF,IAAI,GAAG,KAAKP,KAAL,CAAWG,CAAX,CAAX;;AACA,eAAOI,IAAP,EAAa;AACTE,UAAAA,IAAI,CAACC,IAAL,CAAUH,IAAI,CAACX,KAAf;AACAW,UAAAA,IAAI,GAAGA,IAAI,CAACV,IAAZ;AACH;;AACDW,QAAAA,KAAK,CAACE,IAAN,CAAWD,IAAX;AACH;;AACD,aAAOD,KAAP;AACH;;;;KAEL;;;AACA,eAAeV,YAAf","sourcesContent":["class Node {\n    constructor(key, value) {\n        this.key = key;\n        this.value = value;\n        this.next = null;\n    }\n}\n\nclass MessageTable {\n    constructor(size) {\n        this.cells = new Array(size);\n    }\n\n    hash(key) {\n        let total = 0;\n        for (let i = 0; i < key.length; i++) total += key.charCodeAt(i);\n        return total % this.cells.length;\n    }\n\n    insert(key, value) {\n        const hash = this.hash(key);\n        if (!this.cells[hash]) {\n            this.cells[hash] = new Node(key, value);\n        } else if (this.cells[hash].key === key) {\n            this.cells[hash].value = value;\n        } else {\n            let node = this.cells[hash];\n            while (node.next) {\n                if (node.next.key === key) {\n                    node.next.value = value;\n                    return;\n                }\n                node = node.next;\n            }\n            node.next = new Node(key, value);\n        }\n    }\n\n    get(key) {\n        const hash = this.hash(key);\n        if (!this.cells[hash]) return null;\n        else {\n            let node = this.cells[hash];\n            while (node) {\n                if (node.key === key) return node.value;\n                node = node.next;\n            }\n            return null;\n        }\n    }\n\n    getAll() {\n        const table = [];\n        for (let i = 0; i < this.cells.length; i++) {\n            const cell = [];\n            let node = this.cells[i];\n            while (node) {\n                cell.push(node.value);\n                node = node.next;\n            }\n            table.push(cell);\n        }\n        return table;\n    }\n}\n//export const MTable = 'MessageTable';\nexport default MessageTable;"]},"metadata":{},"sourceType":"module"}